#         }
}
}
rankall = function(outcome, num = "best"){
#Read Data
data = read.table("outcome-of-care-measures.csv", sep =",", header = T,na.strings="Not Available")
states = unique(data$state)
hospital = c()
for(state in states){
if(num = "best"){
hospital = append(hospital, best(state, outcome)[1])
}
}
}
rankall = function(outcome, num = "best"){
#Read Data
data = read.table("outcome-of-care-measures.csv", sep =",", header = T,na.strings="Not Available")
states = unique(data$state)
hospital = c()
for(state in states){
if(num == "best"){
hospital = append(hospital, best(state, outcome)[1])
}
}
}
rankall = function(outcome, num = "best"){
#Read Data
data = read.table("outcome-of-care-measures.csv", sep =",", header = T,na.strings="Not Available")
states = unique(data$state)
hospital = c()
for(state in states){
if(num == "best"){
hospital = append(hospital, best(state, outcome)[1])
}
}
rank = data.frame(state=state, hospital = hospital)
}
head(rankall("heart attack", 20), 10)
rankall = function(outcome, num = "best"){
#Read Data
states = unique(data$state)
hospital = c()
for(state in states){
if(num == "best"){
hospital = append(hospital, best(state, outcome)[1])
}
}
rank = data.frame(state=state, hospital = hospital)
}
head(rankall("heart attack", 20), 10)
ls(head(rankall("heart attack", 20), 10))
rankall("heart attack")
z - rankall("heart attack")
z = rankall("heart attack")
z
z
names(z)
a = c(1:3)
b = c("a","b","v")
n = data.frame(a,b)
n
rankall = function(outcome, num = "best"){
#Read Data
states = unique(data$state)
hospital = c()
for(state in states){
if(num == "best"){
hospital = append(hospital, best(state, outcome)[1])
}
}
rank = data.frame(state,hospital)
}
rankall("heart attack")
z = rankall("heart attack")
z
rankall = function(outcome, num = "best"){
#Read Data
states = unique(data$state)
hospital = c()
for(state in states){
if(num == "best"){
hospital = append(hospital, best(state, outcome)[1])
}
}
data.frame(state,hospital)
}
z = rankall("heart attack")
z
z = rankall("heart attack")
z
z = rankall("heart attack")
setwd("C:/Users/carbon/Dropbox/Github/DataScience/Programming Assignment 3")
rankall = function(outcome, num = "best"){
#Read Data
states = unique(data$state)
hospital = c()
for(state in states){
if(num == "best"){
hospital = append(hospital, best(state, outcome)[1])
}
}
return(data.frame(states,hospital))
}
z = rankall("heart attack")
z = rankall("heart attack")
z
z = rankall("heart attack", "best")
z
best = function(state, outcome){
#Read Data
data = read.table("outcome-of-care-measures.csv", sep =",", header = T,na.strings="Not Available")
if(!(state %in% data$State)){
stop("invalid state")
}
conditions = c("heart attack", "heart failure", "pneumonia")
if(!(outcome %in% conditions)){
stop("invalid outcome")
}
else{
#Make dictionary of values
l = list("heart attack" = "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack",
"heart failure" = "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure",
"pneumonia" = "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia")
#Create Sub Table
sub = droplevels(data[data$State == state,])
z = tapply(sub[[l[[outcome]]]], sub[["Hospital.Name"]], FUN = mean, na.rm=T)
z = sort(z)
return(z)
}
}
z = rankall("heart attack", "best")
rankall = function(outcome, num = "best"){
#Read Data
data = read.table("outcome-of-care-measures.csv", sep =",", header = T,na.strings="Not Available")
states = unique(data$state)
hospital = c()
for(state in states){
if(num == "best"){
hospital = append(hospital, best(state, outcome)[1])
}
}
return(data.frame(states,hospital))
}
z = rankall("heart attack", "best")
source(rankall.r)
source(rankall.R)
debugSource('C:/Users/carbon/Dropbox/Github/DataScience/Programming Assignment 3/rankall.R', echo=TRUE)
z = rankall("heart attack", "best")
z = rankall("heart attack", "best")
states
states
rankall = function(outcome, num = "best"){
#Read Data
data = read.table("outcome-of-care-measures.csv", sep =",", header = T,na.strings="Not Available")
states = unique(data$State)
hospital = c()
for(state in states){
if(num == "best"){
hospital = append(hospital, best(state, outcome)[1])
}
}
return(data.frame(states,hospital))
}
z = rankall("heart attack", "best")
z
rankall = function(outcome, num = "best"){
#Read Data
data = read.table("outcome-of-care-measures.csv", sep =",", header = T,na.strings="Not Available")
states = unique(data$State)
hospital = c()
for(state in states){
if(num == "best"){
hospital = append(hospital, rownames(best(state, outcome)[1]))
}
}
return(data.frame(states,hospital))
}
z = rankall("heart attack", "best")
z = rankall("heart attack", "best")
rankall = function(outcome, num = "best"){
#Read Data
data = read.table("outcome-of-care-measures.csv", sep =",", header = T,na.strings="Not Available")
states = unique(data$State)
hospital = c()
for(state in states){
if(num == "best"){
hospital = append(hospital, rownames(best(state, outcome)[1])
}
}
return(data.frame(states,hospital))
}
rankall = function(outcome, num = "best"){
#Read Data
data = read.table("outcome-of-care-measures.csv", sep =",", header = T,na.strings="Not Available")
states = unique(data$State)
hospital = c()
for(state in states){
if(num == "best"){
hospital = append(hospital, rownames(best(state, outcome)[1]))
}
}
return(data.frame(states,hospital))
}
z = rankall("heart attack", "best")
rownames(best("MD", "heart attack")[1])
rownames(best("MD", "heart attack"))
rownames(best("MD", "heart attack"))[1]
rankall = function(outcome, num = "best"){
#Read Data
data = read.table("outcome-of-care-measures.csv", sep =",", header = T,na.strings="Not Available")
states = unique(data$State)
hospital = c()
for(state in states){
if(num == "best"){
hospital = append(hospital, rownames(best(state, outcome))[1])
}
}
return(data.frame(states,hospital))
}
z = rankall("heart attack", "best")
z = rankall("heart attack", "best")
length(states)
debugSource('C:/Users/carbon/Dropbox/Github/DataScience/Programming Assignment 3/rankall.R', echo=TRUE)
z = rankall("heart attack", "best")
z = rankall("heart attack", "best")
class(rownames(best("MD", "heart attack"))[1])
class(rownames(best("MD", "heart attack"))[1]) == "character"
rankall = function(outcome, num = "best"){
#Read Data
data = read.table("outcome-of-care-measures.csv", sep =",", header = T,na.strings="Not Available")
states = unique(data$State)
hospital = c()
for(state in states){
if(num == "best"){
if(rownames(best(state, outcome))[1] == "character"){
hospital = append(hospital, rownames(best(state, outcome))[1])
}
else{
print(state)
}
}
}
return(data.frame(states,hospital))
}
z = rankall("heart attack", "best")
rankall = function(outcome, num = "best"){
#Read Data
data = read.table("outcome-of-care-measures.csv", sep =",", header = T,na.strings="Not Available")
states = unique(data$State)
hospital = c()
for(state in states){
if(num == "best"){
if(class(rownames(best(state, outcome))[1]) == "character"){
hospital = append(hospital, rownames(best(state, outcome))[1])
}
else{
print(state)
}
}
}
return(data.frame(states,hospital))
}
z = rankall("heart attack", "best")
best("GU", "heart attack")
rownames(best("GU", "heart attack"))
best("GU", "heart attack")
rownames(best("GU", "heart attack"))[1]
best("GU", "heart attack")
best("GU", "heart attack")[[1]]
best("GU", "heart attack")
rownames(best("GU", "heart attack"))
best("GU", "heart attack")
class(best("GU", "heart attack"))
names(best("GU", "heart attack"))
names(best("MD", "heart attack"))
names(best("MD", "heart attack")[1])
rankall = function(outcome, num = "best"){
#Read Data
data = read.table("outcome-of-care-measures.csv", sep =",", header = T,na.strings="Not Available")
states = unique(data$State)
hospital = c()
for(state in states){
if(num == "best"){
if(class(rownames(best(state, outcome))[1]) == "character"){
hospital = append(hospital, names(best(state, outcome))[1])
}
else{
print(state)
}
}
qui
)
rankall = function(outcome, num = "best"){
#Read Data
data = read.table("outcome-of-care-measures.csv", sep =",", header = T,na.strings="Not Available")
states = unique(data$State)
hospital = c()
for(state in states){
if(num == "best"){
if(class(rownames(best(state, outcome))[1]) == "character"){
hospital = append(hospital, names(best(state, outcome))[1])
}
else{
print(state)
}
}
}
return(data.frame(states,hospital))
}
rankall("heart attack")
z = rankall("heart attack")
names(best("GU", "heart attack"))
names(best("GU", "heart attack"))[1]
rankall = function(outcome, num = "best"){
#Read Data
data = read.table("outcome-of-care-measures.csv", sep =",", header = T,na.strings="Not Available")
states = unique(data$State)
hospital = c()
for(state in states){
if(num == "best"){
if(class(names(best(state, outcome))[1]) == "character"){
hospital = append(hospital, names(best(state, outcome))[1])
}
else{
print(state)
}
}
}
return(data.frame(states,hospital))
}
z = rankall("heart attack")
z
head(z,10)
#Set working directory and load file
setwd("C:/Users/carbon/Dropbox/Github/DataScience/Programming Assignment 3")
rankall = function(outcome, num = "best"){
#Read Data
data = read.table("outcome-of-care-measures.csv", sep =",", header = T,na.strings="Not Available")
states = unique(data$State)
hospital = c()
for(state in states){
if(num == "best"){
if(class(names(best(state, outcome))[1]) == "character"){
hospital = append(hospital, names(best(state, outcome))[1])
}
else{
print(state)
}
else if(num == "worst"){
hospital = append(hospital, tail(names(best(state, outcome)),1))
else {
hospital = append(hospital, names(best(state, outcome))[num])
}
}
}
return(data.frame(states,hospital))
}
rankall = function(outcome, num = "best"){
#Read Data
data = read.table("outcome-of-care-measures.csv", sep =",", header = T,na.strings="Not Available")
states = unique(data$State)
hospital = c()
for(state in states){
if(num == "best"){
if(class(names(best(state, outcome))[1]) == "character"){
hospital = append(hospital, names(best(state, outcome))[1])
}
else{
print(state)
}
else if(num == "worst"){
hospital = append(hospital, tail(names(best(state, outcome)),1))
}
else {
hospital = append(hospital, names(best(state, outcome))[num])
}
}
}
return(data.frame(states,hospital))
}
#Set working directory and load file
setwd("C:/Users/carbon/Dropbox/Github/DataScience/Programming Assignment 3")
rankall = function(outcome, num = "best"){
#Read Data
data = read.table("outcome-of-care-measures.csv", sep =",", header = T,na.strings="Not Available")
states = unique(data$State)
hospital = c()
for(state in states){
if(num == "best"){
if(class(names(best(state, outcome))[1]) == "character"){
hospital = append(hospital, names(best(state, outcome))[1])
}
else if(num == "worst"){
hospital = append(hospital, tail(names(best(state, outcome)),1))
}
else {
hospital = append(hospital, names(best(state, outcome))[num])
}
}
}
return(data.frame(states,hospital))
}
submit()
z = rankall("heart attack")
debugSource('C:/Users/carbon/Dropbox/Github/DataScience/Programming Assignment 3/rankall.R', echo=TRUE)
submit()
hospital = append(hospital, names(best(state, outcome))[num])
rankall("heart attack", 4)
rankall("heart attack", 4)
num
print(num)
rankall("heart attack", 4)
debugSource('C:/Users/carbon/Dropbox/Github/DataScience/Programming Assignment 3/rankall.R', echo=TRUE)
rankall("heart attack", 4)
z = rankall("heart attack", 4)
debugSource('C:/Users/carbon/Dropbox/Github/DataScience/Programming Assignment 3/rankall.R', echo=TRUE)
z = rankall("heart attack", 4)
z = rankall("heart attack", 4)
debugSource('C:/Users/carbon/Dropbox/Github/DataScience/Programming Assignment 3/rankall.R', echo=TRUE)
z = rankall("heart attack", 4)
debugSource('C:/Users/carbon/Dropbox/Github/DataScience/Programming Assignment 3/rankall.R', echo=TRUE)
submit
submit()
z
debugSource('C:/Users/carbon/Dropbox/Github/DataScience/Programming Assignment 3/rankall.R', echo=TRUE)
submit()
submit()
submit()
setwd("C:/Users/carbon/Dropbox/Coursera/Getting and Cleaning Data/Quiz 1")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv")
?download.file
destfile = "ss06hid.csv")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv",
destfile = "ss06hid.csv")
setwd("C:/Users/carbon/Dropbox/Github/DataScience/Getting and Cleaning Data/Quiz 1")
h = read.table("ss07hid.csv", head = T, sep = ",")
h = read.table("ss06hid.csv", head = T, sep = ",")
str(h)
str(h$val)
str(h$VAL)
sum(h$VAL = 24)
sum(h$VAL == 24)
sum(h$VAL == 24, na.rm = T)
str(h$FES)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx",
destfile = "NGAS.xlsx")
ls()
library(xlsx)
install.packages("xlsx")
library(xlsx)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx",
destfile = "NGAS.xlsx")
dat = read.xlsx("NGAS.xlsx", sheetIndex = 1, rowIndex = 18:23, colIndex = 7:15)
dat = read.xlsx("NGAS2.xlsx", sheetIndex = 1, rowIndex = 18:23, colIndex = 7:15)
str(Dat)
str(dat)
sum(dat$Zip*dat$Ext,na.rm=T)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
destfile = "rest.xml")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml",
destfile = "rest.xml")
install.packages("XML")
library(XML)
?xmlTreeparse
?xmlTreeParse
doc = xmlTreeParse("rest.xml", useInternal = T)
str(doc)
doc = xmlTreeParse("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml", useInternal = T)
doc = xmlTreeParse("url, useInternal = T)
doc = xmlTreeParse(url, useInternal = T)
""
)
f
zc
asd
[]
]
doc = xmlTreeParse(u)rl, useInternal = T)
doc = xmlTreeParse(url, useInternal = T)
doc = xmlTreeParse(url, useInternal = True)
doc = xmlTreeParse(url, useInternal = TRUE)
url = "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc = xmlTreeParse(url, useInternal = TRUE)
url = "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc = xmlTreeParse(url, useInternal = TRUE)
l
url = "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc = xmlTreeParse(url, useInternal = TRUE)
doc = xmlTreeParse(file, useInternal = TRUE)
doc = xmlTreeParse(url, useInternal = TRUE)
doc = xmlInternalTreeParse(url)
setwd("C:/Users/carbon/Dropbox/Github/DataScience/Getting and Cleaning Data/Quiz 1")
doc = xmlInternalTreeParse(file)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv",
destfile = "Fread.csv")
ft = fread("Fread.csv)
""
?fread
install.packages("fread")
install.packages("data.table")
?fread
f = fread("Fread.csv")
library(fread)
library(data.table)
f = fread("Fread.csv")
str(f)
user.time(DT[,mean(pwgtp15),by=SEX])
library(user.time)
system.time(DT[,mean(pwgtp15),by=SEX])
DT = fread("Fread.csv")
rm(dat)
system.time(DT[,mean(pwgtp15),by=SEX])
