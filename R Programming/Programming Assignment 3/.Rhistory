help(aov)
help(anova)
install.packages(KernSmooth)
install.packages("KernSmooth")
library("KernSmooth")
print('Hello World')
print('This is for my Coursera Screenshot!')
help(by)
#Question 1
library(datasets)
data(iris)
head(iris)
split(iris, iris$species)
tapply(iris$Sepal.Length, iris$species, mean)
length(iris$sepal.Length)
length(iris$Sepal.Length)
length(iris$species)
length(iris$Species)
length(iris["Species"])
iris["Species"]
length(iris["Species"])
type(1)
factor(1)
class(1)
class(iris["Species"])
class(iris$Species)
head(iris["Species"])
head(iris$Species)
source('~/.active-rstudio-document', echo=TRUE)
y = iris$Species
tapply(iris$Sepal.Length, iris$Species, mean)
z = tapply(iris$Sepal.Length, iris$Species, mean)
z$setosa
z
type(z)
class(Z)
class(z)
z["setosa"]
help(tapply)
apply(iris[,1:4], 2, mean)
str(apply)
data(mtcars)
head(mtcars)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars["mpg"], mtcars["cyl"], mean)
length(mtcars["mpg"], mtcars["cyl"])
length(mtcars["mpg"])
tapply(mtcars$hp, mtcars$cyl, mean)
$4
a = tapply(mtcars$hp, mtcars$cyl, mean)
a$4
a[4]
a["4"]
type(a)
class(a)
tapply(mtcars$hp, mtcars$cyl, mean)
$"4"
$'4'
a["8"] - a["4"]
setmean = function() 2
setmean
setmean +4
setmean
setmean(1)
setmean()
f<<- 2
f<1
f=1
makeVector <- function(x = numeric()) {
m <- NULL #Sets m to null
set <- function(y) { #Creates function with sets y to x
x <<- y
m <<- NULL
}
get <- function() x   #Get returns value of x
setmean <- function(mean) m <<- mean  #sets value of mean
getmean <- function() m #Returns value of mean
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean() #Gets value of m from special vector get mean value
if(!is.null(m)) { #If m is not null get data
message("getting cached data")
return(m)
}
data <- x$get() get value of x
m <- mean(data, ...) #Calculate mean
x$setmean(m) #Set value of meaan
m
}
cachemean <- function(x, ...) {
m <- x$getmean() #Gets value of m from special vector get mean value
if(!is.null(m)) { #If m is not null get data
message("getting cached data")
return(m)
}
data <- x$get() get value of x
m <- mean(data, ...) #Calculate mean
x$setmean(m) #Set value of meaan
m
}
#Question 1
library(datasets)
data(iris)
z = tapply(iris$Sepal.Length, iris$Species, mean)
z
data(mtcars)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars["mpg"], mtcars["cyl"], mean)
a = tapply(mtcars$hp, mtcars$cyl, mean)
a["8"] - a["4"]
#Set working directory and load file
setwd("C:/Users/carbon/Dropbox/Github/DataScience/Programming Assignment 3")
#Read table
data = read.table("outcome-of-care-measures.csv", sep =",", header = T,na.strings="Not Available")
#Set State and condition
state = "CA"
condition = ""
#Create Sub Table
sub = data[data$State == state,]
str(data)
str(sub)
View(sub)
View(sub)
str(sub$State)
str(data$State)
library(data)
library(data)
library(datasets)
data(iris)
str(iris)
sub = iris[iris$Species == "setosa"]
sub = iris[iris$Species == "setosa",]
str(sub)
View(sub)
View(sub)
str(data)
dim(iris)
dim(sub)
str(iris)
str(sub)
str(sub)
sub
sub = iris[iris$Species == "setosa",]
factor(sub)
sub
droplevels(sub
)
str(droplevels(sub))
str(subset(iris, iris$Species == "setosa"))
?droplevels
#Set working directory and load file
setwd("C:/Users/carbon/Dropbox/Github/DataScience/Programming Assignment 3")
#Read table
data = read.table("outcome-of-care-measures.csv", sep =",", header = T,na.strings="Not Available")
#Set State and condition
state = "CA"
condition = ""
#Create Sub Table
sub = droplevels(data[data$State == state,])
tapply(sub$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack, sub$Hospital.Name, FUN = mean, na.rm=T)
z = tapply(sub$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack, sub$Hospital.Name, FUN = mean, na.rm=T)
z
min(z)
min(z, na.rm = T)
type(Z)
class(Z)
class(z)
z
sort(z)
z[1]
z = sort(z)
z[1]
#Set working directory and load file
setwd("C:/Users/carbon/Dropbox/Github/DataScience/Programming Assignment 3")
#Read table
data = read.table("outcome-of-care-measures.csv", sep =",", header = T,na.strings="Not Available")
#Set State and condition
state = "MD"
condition = ""
#Create Sub Table
sub = droplevels(data[data$State == state,])
z = tapply(sub$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack, sub$Hospital.Name, FUN = mean, na.rm=T)
z = sort(z)
z[1]
rownames(z[1,1])
rownames(z[1])
colnames(z[1])
z[1]
z
dim(z)
length(Z)
length(z
)
names(z)
names(z[1])
sub$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack
d = list("Heart Attack" = "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack")
d$"Heart Attack"
a = "Heart Attack"
d$a
a
d$a
d[[a]]
l = list("Heart Attack" = "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack",
"Heart Failure" = "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure",
"Pneumonia" = "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia")
d[[a]]
sub[d[[a]]]
sub$d[[a]]]
sub$d[[a]]
sub[d[[a]]]
str(sub[d[[a]]])
data = read.table("outcome-of-care-measures.csv", sep =",", header = T,na.strings="Not Available")
#Set State and condition
state = "MD"
condition = ""
l = list("Heart Attack" = "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack",
"Heart Failure" = "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure",
"Pneumonia" = "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia")
#Create Sub Table
sub = droplevels(data[data$State == state,])
z = tapply(sub[l[[condition]]], sub$Hospital.Name, FUN = mean, na.rm=T)
z = sort(z)
z[1]
l[condition]
l
condition
#Read table
data = read.table("outcome-of-care-measures.csv", sep =",", header = T,na.strings="Not Available")
#Set State and condition
state = "MD"
condition = "Heart Attack"
l = list("Heart Attack" = "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack",
"Heart Failure" = "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure",
"Pneumonia" = "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia")
#Create Sub Table
sub = droplevels(data[data$State == state,])
z = tapply(sub[l[[condition]]], sub$Hospital.Name, FUN = mean, na.rm=T)
condition
l[condition]
sub[l[condition]]
sub[l[[condition]]
]
dim(sub[l[[condition]])
str(sub[l[[condition]])
sub[l[[condition]]
]
dim(sub[l[[condition]]])
dim(sub$Hospitral.Name)
dim(sub$Hospital.Name)
str(sub)
View(sub)
View(sub)
sub$Hospital.Name
dim(sub$Hospital.Name)
length(sub$Hospital.Name)
z = tapply(sub[l[[condition]]], sub$Hospital.Name, FUN = mean, na.rm=T)
type(sub[l[[condition]]])
class(sub[l[[condition]]])
class(sub$Hospital.Name)
sub[l[[condition]]]
dim(sub[l[[condition]]])
dim(list(sub[l[[condition]]]))
z = tapply(c(sub[l[[condition]]]), sub$Hospital.Name, FUN = mean, na.rm=T)
z = tapply(list(sub[l[[condition]]]), sub$Hospital.Name, FUN = mean, na.rm=T)
str(list(sub[l[[condition]]])
_
str(list(sub[l[[condition]]]))
str(sub$Hospital.Name)
condition
l(condition)
l$condition
$a
$condition
z = tapply(sub$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack, sub$Hospital.Name, FUN = mean, na.rm=T)
rm(Z)
rm(z)
z = tapply(list(sub[l[[condition]]]), sub["Hospital.Name"], FUN = mean, na.rm=T)
str(sub["Hospital.Name"])
str(list(sub[l[[condition]]])
)
z = tapply(list(sub[l[[condition]]])), sub["Hospital.Name"], FUN = mean, na.rm=T)
z = tapply(list(sub[l[[condition]]]), sub["Hospital.Name"], FUN = mean, na.rm=T)
z = tapply(sub[l[[condition]]], sub["Hospital.Name"], FUN = mean, na.rm=T)
l[[condition]]
length(sub[l[[condition]]])
sub[l[[condition]]
]
length(sub[l[[condition]]])
str(sub[l[[condition]]])
str(sub["Hospital.Name"])
z = tapply(sub[l[[condition]]], sub["Hospital.Name"], FUN = mean, na.rm=T)
class(sub$Hospital.Name)
class(sub["Hospital.Name"])
y = "Hospital.Name"
sub$y
z = tapply("sub$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack", sub$Hospital.Name, FUN = mean, na.rm=T)
library(datasets)
data(iris)
z = tapply(iris$Sepal.Length, iris$Species, mean)
z
iris$Sepal.Length
class(iris$Sepal.Length)
class(iris[[Sepal.Length]])
class(iris[["Sepal.Length"]])
class(iris[["Species"]])
class(iris$Species)
class(sub[l[[condition]]])
class(sub)
class(iris)
class(sub[[sub$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack]])
class(sub[["Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"]])
condition
class(sub["Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"])
l[condition]
z = tapply(sub[[l[condition]]], sub["Hospital.Name"], FUN = mean, na.rm=T)
class(sub[[l[condition]]])
l[condition]
class(sub[["Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"]])
class(sub[[l[condition]]])
class(sub[[l[condition]]])
?subset
subset(sub,Hopital.Name)
subset(sub,"Hopital.Name"")
""
subset(sub,"Hopital.Name")
class(sub[[l[condition]]])
)
class(sub[[l[condition]]])
l[condition]
sub[[l[condition]]]
class([condition])
class(l[condition])
l[[condition]
]
]class(l[[condition]])
class(l[[condition]])
class(sub[l[[condition]]])
class(sub$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)
z = tapply(sub[l[condition]], sub["Hospital.Name"], FUN = mean, na.rm=T)
z = tapply(sub[l[[condition]]], sub["Hospital.Name"], FUN = mean, na.rm=T)
length(sub[l[[condition]]])
length(sub["Hospital.Name"])
dim(sub["Hospital.Name"])
dim(sub[l[[condition]]])
z = tapply(sub[l[[condition]]], sub["Hospital.Name"], FUN = mean, na.rm=T)
dim(numeric(sub[l[[condition]]])
)
