help(aov)
help(anova)
install.packages(KernSmooth)
install.packages("KernSmooth")
library("KernSmooth")
print('Hello World')
print('This is for my Coursera Screenshot!')
help(by)
#Question 1
library(datasets)
data(iris)
head(iris)
split(iris, iris$species)
tapply(iris$Sepal.Length, iris$species, mean)
length(iris$sepal.Length)
length(iris$Sepal.Length)
length(iris$species)
length(iris$Species)
length(iris["Species"])
iris["Species"]
length(iris["Species"])
type(1)
factor(1)
class(1)
class(iris["Species"])
class(iris$Species)
head(iris["Species"])
head(iris$Species)
source('~/.active-rstudio-document', echo=TRUE)
y = iris$Species
tapply(iris$Sepal.Length, iris$Species, mean)
z = tapply(iris$Sepal.Length, iris$Species, mean)
z$setosa
z
type(z)
class(Z)
class(z)
z["setosa"]
help(tapply)
apply(iris[,1:4], 2, mean)
str(apply)
data(mtcars)
head(mtcars)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars["mpg"], mtcars["cyl"], mean)
length(mtcars["mpg"], mtcars["cyl"])
length(mtcars["mpg"])
tapply(mtcars$hp, mtcars$cyl, mean)
$4
a = tapply(mtcars$hp, mtcars$cyl, mean)
a$4
a[4]
a["4"]
type(a)
class(a)
tapply(mtcars$hp, mtcars$cyl, mean)
$"4"
$'4'
a["8"] - a["4"]
setmean = function() 2
setmean
setmean +4
setmean
setmean(1)
setmean()
f<<- 2
f<1
f=1
makeVector <- function(x = numeric()) {
m <- NULL #Sets m to null
set <- function(y) { #Creates function with sets y to x
x <<- y
m <<- NULL
}
get <- function() x   #Get returns value of x
setmean <- function(mean) m <<- mean  #sets value of mean
getmean <- function() m #Returns value of mean
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean() #Gets value of m from special vector get mean value
if(!is.null(m)) { #If m is not null get data
message("getting cached data")
return(m)
}
data <- x$get() get value of x
m <- mean(data, ...) #Calculate mean
x$setmean(m) #Set value of meaan
m
}
cachemean <- function(x, ...) {
m <- x$getmean() #Gets value of m from special vector get mean value
if(!is.null(m)) { #If m is not null get data
message("getting cached data")
return(m)
}
data <- x$get() get value of x
m <- mean(data, ...) #Calculate mean
x$setmean(m) #Set value of meaan
m
}
#Question 1
library(datasets)
data(iris)
z = tapply(iris$Sepal.Length, iris$Species, mean)
z
data(mtcars)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars["mpg"], mtcars["cyl"], mean)
a = tapply(mtcars$hp, mtcars$cyl, mean)
a["8"] - a["4"]
set.seed(1)
rpois(5,2)
ls()
chdir()
cwd()
getwd()
setwd("C:/Users/carbon/Dropbox/Github/DataScience/Programming Assignment 3")
getwd()
data = read.table("outcome-of-care-measures.csv", sep =",", header = T)
str(data)
str(data#Hospital.Name)
)
data$Hospital.Name
str(data$Hospital.Name)
summary(data$Hospital.Name)
View(data)
View(data)
str(data$Hospital.NAme)
str(data$Hospital.Name)
summary(data$Hospital.Name)
head(data$Hospital.Name)
?tapply
tapply(data$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack, data$State, mean)
tapply(data$State, data$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack,  mean)
warnings()
x = 1:10
y = y <- factor(rep(letters[1:5], each = 2))
y
tapply(x,y,sum)
class(data)
library(datasets)
data(iris)
iris
head(iris)
length(iris)
dim(iris)
str(iris)
dim(subset(iris, Species=Setosa))
subset(iris, Species=Setosa))
subset(iris, Species=Setosa)
subset(iris, Species=Setosa)
subset(iris, Species="Setosa")
head(iris)
subset(iris, Species="setosa")
?subset
iris[Species = "setosa"]
iris[iris$Species = "setosa"]
iris[iris$Species == "setosa"]
View(iris)
View(iris)
iris[iris$Species == "setosa",]
irist = iris[iris$Species == "setosa"]
irist = iris[iris$Species == "setosa",]
state = "Ca"
condition = ""
sub = data[data$State == State,]
state = "Ca"
condition = ""
sub = data[data$State == state,]
rm(iris)
rm(irist)
rm(c(x,y))
rm(x)
rm(y)
View(sub)
levels(data$State)
state = "CA"
condition = ""
sub = data[data$State == state,]
tapply(sub, data$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack,  mean)
tapply(sub, sub$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack,  mean)
dim(sub)
dim(sub$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)
head(sub)
tapply(sub, sub$Hospital.30.Day.Death..Mortality.Rates.from.Heart.Attack,  mean)
tapply(sub, sub$Hospital.30.Day.Death.Mortality.Rates.from.Heart.Attack,  mean)
sub$Hospital.30.Day.Death.Mortality.Rates.from.Heart.Attack
View(sub)
View(sub)
str(sub$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)
dim(sub$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)
str(sub$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)
dim(sub$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)
length(sub$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)
tapply(sub, sub$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack,  mean)
dim(sub)
dim(sub$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)
length(sub$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)
class(sub)
class(sub$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)
tapply(sub$Hospital.Name, sub$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack,  mean)
warning()
warnings()
tapply(sub$Hospital.Name, sub$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack,  mean)
warnings()
library(datasets)
data(iris)
z = tapply(iris$Sepal.Length, iris$Species, mean)
z
tapply(sub$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack, sub$Hospital.Name, mean)
z = c(1,2,3,4,Na)
z = c(1,2,3,4,NA)
z
mean(z)
mean(z, na.rm = T)
class(z)
?tapply
tapply(sub$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack, sub$Hospital.Name, mean, na.rm=T)
tapply(sub$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack, sub$Hospital.Name, FUN = mean, na.rm=T)
?mean
z
mean(z)
tapply(sub$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack, sub$Hospital.Name, FUN = mean, na.rm=T)
warnings()
str(sub$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)
class(sub$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)
as.numeric(str(sub$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack))
mean(sub$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)
mean(as.numeric(sub$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)}
mean(as.numeric(sub$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack))
as.numeric(sub$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)
sub$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack
data = read.table("outcome-of-care-measures.csv", sep =",", header = T, na.strings"Not Available")
data = read.table("outcome-of-care-measures.csv", sep =",", header = T, na.strings="Not Available")
data
head(data)
#Set State and condition
state = "CA"
condition = ""
#Create Sub Table
sub = data[data$State == state,]
sub$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack
tapply(c, sub$Hospital.Name, FUN = mean, na.rm=T)
tapply(sub$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack, sub$Hospital.Name, FUN = mean, na.rm=T)
sub$Hospital.Name
dim(sub$Hospital.Name)
length(sub$Hospital.Name)
levels(sub$Hospital.Name)
length(levels(sub$Hospital.Name))
length(levels(data$Hospital.Name))
length(data)
dim(data)
dim(sub)
head(sub$Hospital.Name)
head(data$Hospital.Name)
View(sub)
View(sub)
length(levels(sub$Hospital.Name))
length(levels(data$Hospital.Name))
dim(data)
dim(sub)
sub
str(sub)
