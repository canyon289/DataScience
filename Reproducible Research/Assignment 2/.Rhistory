13800/3950
demo()
is.things()
demo(is.things)
demo(package = .packages(all.available = TRUE))
demo(glm.vr)
demo(graphics)
demo(lattive)
demo(lattice)
demo(tkcanvas)
demo(plotmath)
demo(Hershey)
demo(scoping)
qplot
?qplot
library(ggplot)
library(ggplot2)
?qplot
qplot(interval, msteps, data = avgsteps) + geom_line()
---
title: 'Reproducible Research: Peer Assessment 1'
output:
html_document:
keep_md: yes
---
## Loading and preprocessing the data
Load csv
```{r}
steps = read.csv("activity.csv")
```
## What is mean total number of steps taken per day?
Load packages
```{r}
library(ggplot2)
library(lubridate)
```
Split date column into day, month, year
```{r}
steps$day = day(steps$date)
steps$month = month(steps$date)
steps$year  = year(steps$date)
```
The mean of the totals steps taken per day is below
```{r}
mean(steps$steps, na.rm = T)
median(steps$steps, na.rm = T)
```
## What is the average daily activity pattern?
```{r}
library(plyr)
avgsteps = ddply(steps, .(interval), summarise, msteps = mean(steps, na.rm = T))
qplot(interval, msteps, data = avgsteps) + geom_line()
```
## Imputing missing values
All missing values will equal global average
```{r}
steps$steps[is.na(steps$steps)] = mean(steps$steps, na.rm = T)
```
## Are there differences in activity patterns between weekdays and weekends?
```{r}
weekend <- function(day){
if (wday(day, label = T) %in% c("Sun", "Sat")){
return("Weekend")
}
return("Weekday")
}
steps = ddply(steps, .(date,interval), transform, day = weekend(date))
qplot(interval, steps, data = steps, facets = day~.)
```
---
title: 'Reproducible Research: Peer Assessment 1'
output:
html_document:
keep_md: yes
---
## Loading and preprocessing the data
Load csv
```{r}
steps = read.csv("activity.csv")
```
## What is mean total number of steps taken per day?
Load packages
```{r}
library(ggplot2)
library(lubridate)
```
Split date column into day, month, year
```{r}
steps$day = day(steps$date)
steps$month = month(steps$date)
steps$year  = year(steps$date)
```
The mean of the totals steps taken per day is below
```{r}
mean(steps$steps, na.rm = T)
median(steps$steps, na.rm = T)
```
## What is the average daily activity pattern?
```{r}
library(plyr)
avgsteps = ddply(steps, .(interval), summarise, msteps = mean(steps, na.rm = T))
qplot(interval, msteps, data = avgsteps) + geom_line()
```
## Imputing missing values
All missing values will equal global average
```{r}
steps$steps[is.na(steps$steps)] = mean(steps$steps, na.rm = T)
```
## Are there differences in activity patterns between weekdays and weekends?
```{r}
weekend <- function(day){
if (wday(day, label = T) %in% c("Sun", "Sat")){
return("Weekend")
}
return("Weekday")
}
steps = ddply(steps, .(date,interval), transform, day = weekend(date))
qplot(interval, steps, data = steps, facets = day~.)
```
The mean of the totals steps taken per day is below
source('~/.active-rstudio-document', echo=TRUE)
?facet
?ggplot2
?ggplot
setwd("C:\Users\kumarra\Documents\GitHub\DataScience\Reproducible Research\Assignment 1")
getwd()
ls
setwd("~/GitHub/DataScience/Reproducible Research/Assignment 1")
library(knitr)
knit2html("PA1.rmd")
a = c(1:5)
max(a)
str(avg$steps)
str(avgsteps)
?max
avgsteps$interval[avgsteps$msteps = max(avgsteps$msteps),]
setwd("~/GitHub/DataScience/Reproducible Research/Assignment 2")
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2")"
k
sdlfkj
)
?download.file
download.file(url = "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2")
```{r DownloadFiles}
```{r DownloadFiles}
download.file(url = "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2",
destfile = "repdatastormdata.bz2")
?unz
unz("repdatastormdata.bz2")
unz(filename = "repdatastormdata.bz2")
unz("test", filename = "repdatastormdata.bz2")
test
?bzfile
storms = read.table(bzfile)
storms = read.table(bzfile("repdatastormdata.bz2"))
storms = read.table(bzfile("storm.bz2"))
storms = read.csv(bzfile("storm.bz2"))
str(storms)
table(storms$state)
table(storms$STATE)
names(storm$STATE)
names(storms$STATE)
storms$STATE
levels(storms$STATE)
str(storms)
levels(storms$EVTYPE)
levels(storm)
levels(storms)
summary(storms)
eventfatality = ddply(storms, .(EVTYPE), summarise, fatalities = sum(FATALITIES), injuries = sum(INJURIES))
eventfatality
?sort
?sort
order(eventfatality)
eventfatality
eventfatality[order(eventfatality$fatalities),]
eventfatality[order(eventfatality$fatalities, decreasing = True),]
eventfatality[order(eventfatality$fatalities, decreasing = TRUE),]
eventfatality = eventfatality[order(eventfatality$fatalities, decreasing = TRUE),]
eventfatality
eventfatality = ddply(storms, .(EVTYPE), transform, Affected = sum(fatalities + injuries))
eventfatality = ddply(storms, .(EVTYPE), transform, Affected = (fatalities + injuries)
)
eventfatality
eventfatality$fatalities
eventfatality = ddply(storms, .(EVTYPE), transform, affected = (fatalities + injuries))
eventfatality = ddply(eventfatalities, .(EVTYPE), transform, affected = (fatalities + injuries))
eventfatality = ddply(eventfatality, .(EVTYPE), transform, affected = (fatalities + injuries))
eventfatality
sum(1,2)
eventfatality = ddply(storms, .(EVTYPE), summarise, fatalities = sum(FATALITIES), injuries = sum(INJURIES), affected = (sum(FATALITIES,INJURIES)))
eventfatality = eventfatality[order(eventfatality$fatalities, decreasing = TRUE),]
eventfatality
ef = ddply(storms, .(EVTYPE), summarise, fatalities = sum(FATALITIES), injuries = sum(INJURIES), affected = (sum(FATALITIES,INJURIES)))
ef = eventfatality[order(eventfatality$fatalities, decreasing = TRUE),]
ef
str(storms)
