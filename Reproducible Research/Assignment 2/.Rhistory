install.package("formatR")
install.packages("formatR")
?ddplyr
?plyr
?ddply
import(plyr)
library(plyr)
?plyr
library(datasets)
str(mtcars)
table(mtcars$mpg,mtcars$cyl)
table(mtcars$cyl)
table(mtcars$cyl,mtcars$mpg)
?table
str(mtcars)
library(ggplot)
library(ggplot2)
qplot(mtcars$cyl,mtcars$mpg)
?qplot
qplot(mpg, data = mtcars facets =.cyl)
qplot(mpg, data = mtcars, facets =.cyl)
qplot(mpg, data = mtcars, facets =cyl)
qplot(mpg, data = mtcars, facets =.~cyl)
?qplot
qplot(mpg, wt, data = mtcars, geom="path")
qplot(factor(cyl), wt, data = mtcars, geom=c("boxplot", "jitter"))
qplot(factor(cyl), wt, data = mtcars, geom=c("boxplot"))
qplot(factor(cyl), wt, data = mtcars, geom=boxplot
)
qplot(factor(cyl), wt, data = mtcars, geom=jitter)
qplot(mpg, data = mtcars, geom = "dotplot")
qplot(factor(cyl), wt, data = mtcars, geom=c("boxplot", "jitter"))
qplot(cyl, wt, data = mtcars, geom=c("boxplot", "jitter"))
?swirl
library(swirl)
library(tutorial)
setwd("~/")
?knitr
library(knitr)
?knitr
manipulate(myplot(mu), mu = slider(1, 20, step = 1))
library(manipulatie)
library(manipulate
)
source('~/.active-rstudio-document')
library(ggplot, manipulate)
library(ggplot2, manipulate)
source('~/.active-rstudio-document', echo=TRUE)
?dt
source('~/.active-rstudio-document', echo=TRUE)
data(sleep)
head(sleep)
sleep
library(ggplot2)
g <- ggplot(sleep, aes(x = group, y = extra, group = factor(ID)))
g <- g + geom_line(size = 1, aes(colour = ID)) + geom_point(size =10, pch = 21, fill = "salmon", alpha = .5)
g
library(ggplot2)
g <- ggplot(sleep, aes(x = group, y = extra, group = factor(ID)))
g <- g + geom_line(size = 1, aes(colour = ID))
g
library(ggplot2)
g <- ggplot(sleep, aes(x = group, y = extra, group = factor(ID)))
g <- g + geom_line(size = 1, aes(colour = ID)) + geom_point(size =10, pch = 21, fill = "salmon", alpha = .5)
g
lambda = .2
n = 40
sim = 1000
means = replicate(n= 1000, expr = mean(rexp(40,1)))
qplot(means)
ggplot(means)
ggplot(means) + geom_density()
ggplot(aes(means)) + geom_density()
ggplot(aes(x=means)) + geom_density()
ggplot(data = means, aes(x=means)) + geom_density()
ggplot(means, aes(x=means)) + geom_density()
ggplot(data.frame(means), aes(x=means)) + geom_density()
means = replicate(n= 10000, expr = mean(rexp(40,1)))
ggplot(data.frame(means), aes(x=means)) + geom_density()
means = replicate(n= 100000, expr = mean(rexp(40,1)))
ggplot(data.frame(means), aes(x=means)) + geom_density()
1/.2
means = replicate(n= 100000, expr = mean(rexp(n,lambda)))
ggplot(data.frame(means), aes(x=means)) + geom_density()
means = replicate(n= 1000, expr = mean(rexp(n,lambda)))
ggplot(data.frame(means), aes(x=means)) + geom_density()
var(means)
2^3
.2^-2
.2^-2
?replicate
set.seed(1)
means = replicate(n= 1000, expr = mean(rexp(n,lambda)))
set.seed(1)
means2 = replicate(n= 1000, expr = mean(rexp(n,lambda)))
means1 == means2
means == means2
set.seed(1)
means = replicate(n= 1000, expr = mean(rexp(n,lambda)))
set.seed(2)
means2 = replicate(n= 1000, expr = mean(rexp(n,lambda)))
means==means2
means = replicate(n= 1000, expr = mean(rexp(n,lambda)))
set.seed(1)
var = replicate(n= 1000, expr = var(rexp(n,lambda)))
var
mean(var)
set.seed(1)
means = replicate(n= 1000, expr = mean(rexp(n,lambda)))
set.seed(1)
var = replicate(n= 1000, expr = mean(var(rexp(n,lambda))))
var
set.seed(1)
var = replicate(n= 1000, expr = mean(var(rexp(n,lambda))))
mean(var)
var = mean(replicate(n= 1000, expr = var(rexp(n,lambda))))
var
mean
means
set.seed(1234)
df <- data.frame(cond = factor( rep(c("A","B"), each=200) ),
rating = c(rnorm(200),rnorm(200, mean=.8)))
qplot(df$rating, binwidth=.5)
ggplot(df, aes(x=rating)) + geom_histogram(binwidth=.5)
ggplot(df, aes(x=rating)) + geom_histogram(binwidth=.5, colour="black", fill="white")
ggplot(df, aes(x=rating)) + geom_density()
ggplot(df, aes(x=rating)) +
geom_histogram(aes(y=..density..),      # Histogram with density instead of count on y-axis
binwidth=.5,
colour="black", fill="white") +
geom_density(alpha=.2, fill="#FF6666")  # Overlay with transparent density plot
##Add Line for the mean
ggplot(df, aes(x=rating)) + geom_histogram(binwidth=.5, colour="black", fill="white") +
geom_vline(aes(xintercept=mean(rating, na.rm=T)),   # Ignore NA values for mean
color="red", linetype="dashed", size=1)
ggplot(df, aes(x=rating, fill=cond)) + geom_histogram(binwidth=.5, alpha=.5, position="identity")
ggplot(df, aes(x=rating, fill=cond)) + geom_histogram(binwidth=.5, position="dodge")
ggplot(df, aes(x=rating, colour=cond)) + geom_density()
ggplot(df, aes(x=rating, fill=cond)) + geom_density(alpha=.3)
library(plyr)
cdf <- ddply(df, "cond", summarise, rating.mean=mean(rating))
ggplot(df, aes(x=rating, fill=cond)) +
geom_histogram(binwidth=.5, alpha=.5, position="identity") +
geom_vline(data=cdf, aes(xintercept=rating.mean,  colour=cond),
linetype="dashed", size=1)
ggplot(df, aes(x=rating, colour=cond)) + geom_density() +
geom_vline(data=cdf, aes(xintercept=rating.mean,  colour=cond),
linetype="dashed", size=1)
ggplot(data.frame(means), aes(x=means)) + geom_density() + stat_function(dnorm)
ggplot(data.frame(means), aes(x=means)) + geom_density() + stat_function(fun = dnorm)
ggplot(data.frame(means), aes(x=means)) + geom_density() + stat_function(fun = dnorm, colour =blue)
ggplot(data.frame(means), aes(x=means)) + geom_density() + stat_function(fun = dnorm, colour ="blue")
ggplot(data.frame(means), aes(x=means)) + geom_density() + stat_function(fun = dnorm, colour ="blue", mean = 1/lambda)
ggplot(data.frame(means), aes(x=means)) + geom_density() + stat_function(fun = dnorm, colour ="blue", arg = list(mean = 1/lambda))
set.seed(1)
means = replicate(sim, expr = mean(rexp(n,lambda)))
set.seed(1)
var = mean(replicate(sim, expr = var(rexp(n,lambda))))
ggplot(data.frame(means), aes(x=means)) + geom_density() + stat_function(fun = dnorm, colour ="blue", arg = list(mean = 1/lambda))
sim = 100000
```
Simulating the mean of a thousand trials
```{r Replication}
set.seed(1)
means = replicate(sim, expr = mean(rexp(n,lambda)))
set.seed(1)
var = mean(replicate(sim, expr = var(rexp(n,lambda))))
ggplot(data.frame(means), aes(x=means)) + geom_density() + stat_function(fun = dnorm, colour ="blue", arg = list(mean = 1/lambda))
ggplot(data.frame(means), aes(x=means)) + geom_density() + stat_function(fun = dnorm, colour ="blue", arg = list(mean = 1/lambda var = 1/lambda^2))
ggplot(data.frame(means), aes(x=means)) + geom_density() + stat_function(fun = dnorm, colour ="blue", arg = list(mean = 1/lambda, var = 1/lambda^2))
ggplot(data.frame(means), aes(x=means)) + geom_density() + stat_function(fun = dnorm, colour ="blue", arg = list(mean = 1/lambda, sd = 1/lambda))
ggplot(data.frame(means), aes(x=means)) + geom_density() + stat_function(fun = dnorm, colour ="blue", arg = list(mean = 1/lambda, sd = 1/lambda^4))
print(p0)
source('~/.active-rstudio-document', echo=TRUE)
print(p0)
x = rnorm(1000);
# overlay histogram, empirical density and normal density
p0 = qplot(x, geom = 'blank') +
geom_line(aes(y = ..density.., colour = 'Empirical'), stat = 'density') +
stat_function(fun = dnorm, aes(colour = 'Normal')) +
geom_histogram(aes(y = ..density..), alpha = 0.4) +
scale_colour_manual(name = 'Density', values = c('red', 'blue')) +
opts(legend.position = c(0.85, 0.85))
print(p0)
ggplot(data.frame(means), aes(x=means)) + geom_density() + stat_function(fun = dnorm, colour ="blue", arg = list(mean = 1/lambda, sd = 1/lambda))
ggplot(data.frame(means), aes(x=means)) + geom_density() + stat_function(fun = dnorm, colour ="blue", arg = list(mean = 1/lambda))
var
ggplot(data.frame(means), aes(x=means)) + geom_density() + stat_function(fun = dnorm, colour ="blue", arg = list(mean = 1/lambda 1/var))
ggplot(data.frame(means), aes(x=means)) + geom_density() + stat_function(fun = dnorm, colour ="blue", arg = list(mean = 1/lambda, sd= 1/var))
ggplot(data.frame(means), aes(x=means)) + geom_density() + stat_function(fun = dnorm, colour ="blue", arg = list(mean = 1/lambda, sd=sqrt(var)))
ggplot(data.frame(means), aes(x=means)) + geom_density() + stat_function(fun = dnorm, colour ="blue", arg = list(mean = 1/lambda, sd=var^2))
ggplot(data.frame(means), aes(x=means)) + geom_density() + stat_function(fun = dnorm, colour ="blue", arg = list(mean = (1/lambda^2)/40)
ggplot(data.frame(means), aes(x=means)) + geom_density() + stat_function(fun = dnorm, colour ="blue", arg = list(mean = (1/lambda, sd (lambda^2/40)))
ggplot(data.frame(means), aes(x=means)) + geom_density() + stat_function(fun = dnorm, colour ="blue", arg = list(mean = (1/lambda, sd (lambda^2/40))))
ggplot(data.frame(means), aes(x=means)) + geom_density() + stat_function(fun = dnorm, colour ="blue", arg = list(mean = (1/lambda, sd=(lambda^2/40))))
ggplot(data.frame(means), aes(x=means)) + geom_density() + stat_function(fun = dnorm, colour ="blue", arg = list(mean = (1/lambda, sd=(lambda^-2/40))))
ggplot(data.frame(means), aes(x=means)) + geom_density() + stat_function(fun = dnorm, colour ="blue", arg = list(mean = 1/lambda, sd=(lambda^-2/40)))
sim = 100000
```
Simulating the mean of a thousand trials
```{r Replication}
set.seed(1)
means = replicate(sim, expr = mean(rexp(n,lambda)))
set.seed(1)
#var = mean(replicate(sim, expr = var(rexp(n,lambda))))
ggplot(data.frame(means), aes(x=means)) + geom_density() + stat_function(fun = dnorm, colour ="blue", arg = list(mean = 1/lambda, sd=(lambda^-2/n)))
```
sim = 100000
means = replicate(sim, expr = mean(rexp(n,lambda)))
ggplot(data.frame(means), aes(x=means)) + geom_density() + stat_function(fun = dnorm, colour ="blue", arg = list(mean = 1/lambda, sd=(lambda^-2/n)))
ggplot(data.frame(means), aes(x=means)) + geom_density() + stat_function(fun = dnorm, colour ="blue", arg = list(mean = 1/lambda, sd=(lambda^-2/sqrt(n))))
ggplot(data.frame(means), aes(x=means)) + geom_density() + stat_function(fun = dnorm, colour ="blue", arg = list(mean = 1/lambda, sd=sqrt(lambda^-2/sqrt(n))
)
ggplot(data.frame(means), aes(x=means)) + geom_density() + stat_function(fun = dnorm, colour ="blue", arg = list(mean = 1/lambda, sd=sqrt(lambda^-2/sqrt(n))))
ggplot(data.frame(means), aes(x=means)) + geom_density() + stat_function(fun = dnorm, colour ="blue", arg = list(mean = 1/lambda, sd=sqrt(lambda^-2/n)))
var = mean(replicate(sim, expr = var(rexp(n,lambda))))
var
var(means)
sqrt(lambda^-2/n)
sim = 100000
set.seed(1)
means = replicate(sim, expr = mean(rexp(n,lambda)))
set.seed(1)
var = mean(replicate(sim, expr = var(rexp(n,lambda))))
ggplot(data.frame(means), aes(x=means)) + geom_density() + stat_function(fun = dnorm, colour ="blue", arg = list(mean = 1/lambda, sd=sqrt(lambda^-2/n)))
var
sd(means)
qnorm(.975)
qnorm(.95)
means
mean(mean)
mean(means)
mean(means) + c(-1,1)*sd(means)*qnorm(.975)
sd(means)
theoretical = sqrt(lambda^-2/n)
sqrt(lambda^-2/n)
setwd("~/GitHub/DataScience/Reproducible Research/Assignment 2")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
?ggplot
setwd("~/GitHub/DataScience/Reproducible Research/Assignment 2")
source('~/.active-rstudio-document', echo=TRUE)
mean(means) + c(-1,1)*sd(means)/sqrt(40)*qnorm(.975)
sqrt(lambda^-2/n)
sd(means)
lambda^-2
lambda^-2/40
sd(means)^2
sd(means)^-2
sd(means)^2
var(means)
sd(means)^2
sd(means)*40
sim = 10000000
means = replicate(sim, expr = mean(rexp(n,lambda)))
var(means)
var(means)*40
qnorm(.975)
mean(means)
ggplot(data.frame(means), aes(x=means)) + geom_density() + stat_function(fun = dnorm, colour ="blue", arg = list(mean = 1/lambda, sd=sqrt(lambda^-2/n)))+scale_colour_manual("Legend title", values = c("red", "blue")
)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
ggplot(data.frame(means), aes(x=means)) + geom_density() + stat_function(fun = dnorm, colour ="blue", arg = list(mean = 1/lambda, sd=sqrt(lambda^-2/n)))+scale_colour_manual("Legend title", values = c("blue"))
ggplot(data.frame(means), aes(x=means)) + geom_density() + stat_function(fun = dnorm, colour ="blue", arg = list(mean = 1/lambda, sd=sqrt(lambda^-2/n)))+scale_colour_manual("Legend title", values = c("blue", "black"))
ggplot(data.frame(means), aes(x=means)) + geom_density() + stat_function(fun = dnorm, colour ="blue", arg = list(mean = 1/lambda, sd=sqrt(lambda^-2/n))) + scale_colour_manual("Legend title", values = c("blue", "black"), labels = c("blue", "black"))
ggplot(data.frame(means), aes(x=means,colour = g)) + geom_density() + stat_function(fun = dnorm, colour ="blue", arg = list(mean = 1/lambda, sd=sqrt(lambda^-2/n))) + scale_colour_manual("Legend title", values = c("blue", "black"), labels = c("blue", "black"))
ggplot(data.frame(means), aes(x=means,colour = NULL)) + geom_density() + stat_function(fun = dnorm, colour ="blue", arg = list(mean = 1/lambda, sd=sqrt(lambda^-2/n))) + scale_colour_manual("Legend title", values = c("blue", "black"), labels = c("blue", "black"))
ggplot(data.frame(means), aes(x=means,color = "green")) + geom_density() + stat_function(fun = dnorm, colour ="blue", arg = list(mean = 1/lambda, sd=sqrt(lambda^-2/n)))
ggplot(data.frame(means), aes(x=means,color = "black")) + geom_density() + stat_function(fun = dnorm, colour ="blue", arg = list(mean = 1/lambda, sd=sqrt(lambda^-2/n)))
ggplot(data.frame(means), aes(x=means,color = "black")) + geom_density() + stat_function(fun = dnorm, colour ="blue", arg = list(mean = 1/lambda, sd=sqrt(lambda^-2/n))) + scale_colour_manual(values = c("red", "green"), labels = c("quadratic", "cubic"))
ggplot(data.frame(means), aes(x=means,color = "black")) + geom_density() + stat_function(fun = dnorm, arg = list(mean = 1/lambda, sd=sqrt(lambda^-2/n))) + scale_colour_manual(values = c("red", "green"), labels = c("Simulated", "cubic"))
ggplot(data.frame(means), aes(x=means)) + geom_density() + stat_function(fun = dnorm, arg = list(mean = 1/lambda, sd=sqrt(lambda^-2/n))) + scale_colour_manual(values = c("red", "green"), labels = c("Simulated", "cubic"))
ggplot(data.frame(means), aes(x=means, color = fun)) + geom_density() + stat_function(fun = dnorm, arg = list(mean = 1/lambda, sd=sqrt(lambda^-2/n))) + scale_colour_manual(values = c("red", "green"), labels = c("Simulated", "cubic"))
ggplot(data.frame(means), aes(x=means)) + geom_density() + stat_function(fun = dnorm, color = "blue", arg = list(mean = 1/lambda, sd=sqrt(lambda^-2/n)))
ggplot(data.frame(means), aes(x=means)) + geom_density() + stat_function(fun = dnorm, color = "blue", arg = list(mean = 1/lambda, sd=sqrt(lambda^-2/n))) + scale_colour_manual("Lgend title", values = c("red", "blue", "green", "orange"))
ggplot(data.frame(means), aes(x=means)) + geom_density() + stat_function(fun = dnorm, color = "blue", arg = list(mean = 1/lambda, sd=sqrt(lambda^-2/n))) + scale_colour_manual("Legend title", values = c("red", "blue"))
lambda = .2
n = 40
sim = 10000
means = replicate(sim, expr = mean(rexp(n,lambda)))
ggplot(data.frame(means), aes(x=means)) + geom_density() + stat_function(fun = dnorm, color = "blue", arg = list(mean = 1/lambda, sd=sqrt(lambda^-2/n))) + scale_colour_manual("Legend title", values = c("red", "blue"))
ggplot(data.frame(means), aes(x=means)) + geom_density() + stat_function(fun = dnorm, aes(color = "blue"), arg = list(mean = 1/lambda, sd=sqrt(lambda^-2/n))) + scale_colour_manual("Legend title", values = c("red", "blue"))
ggplot(data.frame(means), aes(x=means, color="red")) + geom_density() + stat_function(fun = dnorm, aes(color = "blue"), arg = list(mean = 1/lambda, sd=sqrt(lambda^-2/n))) + scale_colour_manual("Legend title", values = c("red", "blue"))
data(sleep)
head(sleep)
sleep
diff = sleep$extra[11:20,]- sleep$extra[1:10,]
diff = sleep$extra[11:20]- sleep$extra[1:10]
diff
t.test(difference)
t.test(diff)
1100 + 30/sqrt((9-1))*qnorm(.975)*c(-1,1)
1100 + 30/3 * qt(.975,n-1) + c(-1,1)
1100 + 30/3 * qt(.975,9-1) + c(-1,1)
1100 + 30/3 * qt(.95,9-1) + c(-1,1)
1100 + 30/3 * qt(.975,9-1) + c(-1,1)
?qt
1100 + 30/3 * qt(.975,9-1) * c(-1,1)
1100 + c(.3,2.10,2.60,1.5)/3 * qt(.975,9-1) * c(-1,1)
c(.3,2.10,2.60,1.5)/3 * qt(.975,9-1) * c(-1,1)
qt(.975,8)
qt(.975,8)*c(.3,2.10,2.60,1.50)-.2
qt(.975,8)*c(.3,2.10,2.60,1.50)-2
?pairedt
?t.test
?rnorm
t.test?
()
?t.test
newt = dnorm(3, sd = sqrt(.6))
oldt = dnorm(5, sd = sqrt(.68))
newt
oldt = dnorm(5, sd = sqrt(.68),10)
newt = dnorm(3, sd = sqrt(.6),10)
oldt
?dnorm
oldt = dnorm(10,5, sd = sqrt(.68))
oldt
newt = rnorm(,10,3, sd = sqrt(.6))
newt = rnorm(,10,3, sd = sqrt(.6))
newt = rnorm(,10,3, sqrt(.6))
newt = rnorm(10,3, sqrt(.6))
oldt = rnorm(10,5, sd = sqrt(.68))
?t.test
t.test(x-y, var.equal = F, conf.level =.95)
t.test(newt-oldt, var.equal = F, conf.level =.95)
t.test(newt-oldt, var.equal = T, conf.level =.95)
t.test(newt-oldt, var.equal = F, conf.level =.95)
t.test(newt,oldt var.equal = F, conf.level =.95)
t.test(newt,oldt, var.equal = F, conf.level =.95)
t.test(newt,oldt, var.equal = T, conf.level =.95)
t.test(newt,oldt, var.equal = F, conf.level =.95)
t.test(newt-oldt, var.equal = F, conf.level =.95)
rnorm
?rnorm
#Question 6
newt = rnorm(100,5,.5)
oldt = rnorm(100,6,2)
t.test(newt,oldt, var.equal=T, conf.level=.95)
t.test(newt-oldt, var.equal = t, conf.level =.95)
t.test(newt,oldt, var.equal=T, conf.level=.95)
newt = rnorm(10,3, sd = sqrt(.6))
oldt = rnorm(10,5, sd = sqrt(.68))
t.test(newt-oldt, var.equal = t, conf.level =.95)
t.test(newt,oldt, var.equal=T, conf.level=.95)
t.test(newt,oldt, var.equal = F, conf.level = .95)
?t.test
t.test(oldt-newt, var.equal = F, conf.level = .95)
newt = rnorm(9,-3,1.5)
oldt = rnorm(9,1,1.8)
t.test(newt,oldt,var.equal = T)
t.test(newt,oldt,var.equal = T, conf.level=.9)
t.test(newt,oldt,var.equal = F, conf.level=.9)
t.test(treated,placebo,var.equal = F, conf.level=.9)
#Question 7
treated = rnorm(9,-3,1.5)
placebo = rnorm(9,1,1.8)
t.test(treated,placebo,var.equal = F, conf.level=.9)
#Question 7
treated = rnorm(9,-3,1.5)
placebo = rnorm(9,1,1.8)
t.test(treated,placebo,var.equal = T, conf.level=.9)
#Question 7
treated = rnorm(9,-3,1.5)
placebo = rnorm(9,1,1.8)
t.test(treated,placebo,var.equal = F, conf.level=.9)
#Question 7
treated = rnorm(9,-3,1.5)
placebo = rnorm(9,1,1.8)
t.test(treated-placebo,var.equal = F, conf.level=.9)
#Question 7
treated = rnorm(9,-3,1.5)
placebo = rnorm(9,1,1.8)
t.test(treated-placebo,var.equal = t, conf.level=.9)
t.test(treated,placebo, paired = T,var.equal = F, conf.level=.9)
t.test(treated,placebo, paired = F,var.equal = F, conf.level=.9)
t.test(treated-placebo, paired = F,var.equal = F, conf.level=.9)
treated = rnorm(9,-3,1.5)
mean(treated)
sd(treated)
placebo = rnorm(100,1,1.8)
treated = rnorm(100,-3,1.5)
mean(treated)
sp = sqrt(((n-1)*splacebo^2+(n-1)*streated^2)/(n + n -1))
sp = sqrt(((n-1)*Splacebo^2+(n-1)*Streated^2)/(n + n -1))
Splacebo = 1.5
Streated = 1.8
sp = sqrt(((n-1)*Splacebo^2+(n-1)*Streated^2)/(n + n -1))
?qt
qt(.95,16)
Streated - Splaceb + c(-1,1)*qt(.95,16)*(1/8+1/8)^(1/2)
Streated - Splaceb0 + c(-1,1)*qt(.95,16)*(1/8+1/8)^(1/2)
Streated - Splacebo + c(-1,1)*qt(.95,16)*(1/8+1/8)^(1/2)
Streated - Splacebo + c(-1,1)*qt(.95,16)*(1/8+1/8)^(1/2)*sp
Streated - Splacebo + c(-1,1)*qt(.95,16)*(1/n+1/n)^(1/2)*sp
Mtreated - Mplacebo + c(-1,1)*qt(.95,16)*(1/n+1/n)^(1/2)*sp
Splacebo = 1.5
Streated = 1.8
Mplacebo = 1
Mtreated = -3
Mtreated - Mplacebo + c(-1,1)*qt(.95,16)*(1/n+1/n)^(1/2)*sp
Streated - Splacebo + c(-1,1)*qt(.90,16)*(1/n+1/n)^(1/2)*sp
Streated - Splacebo + c(-1,1)*qt(.95,16)*(1/n+1/n)^(1/2)*sp
Streated - Splacebo + c(-1,1)*qt(.95,16)*(1/n+1/n)^(1/2)*sp
Mtreated - Mplacebo + c(-1,1)*qt(.95,16)*(1/n+1/n)^(1/2)*sp
Mtreated - Mplacebo + c(-1,1)*qt(.5,16)*(1/n+1/n)^(1/2)*sp
Mtreated - Mplacebo + c(-1,1)*qt(.05,16)*(1/n+1/n)^(1/2)*sp
Mtreated - Mplacebo + c(-1,1)*qt(.95,16)*(1/n+1/n)^(1/2)*sp
sp = sqrt(((n-1)*Splacebo^2+(n-1)*Streated^2)/(n + n -2))
Mtreated - Mplacebo + c(-1,1)*qt(.95,16)*(1/n+1/n)^(1/2)*sp
sp = sqrt(((n-1)*Splacebo^2+(n-1)*Streated^2)/(n + n -2))
Mtreated - Mplacebo + c(-1,1)*qt(.95,16)*(1/n+1/n)^(1/2)*s
sp = sqrt(((n-1)*Splacebo^2+(n-1)*Streated^2)/(n + n -2))
Mtreated - Mplacebo + c(-1,1)*qt(.95,16)*(1/n+1/n)^(1/2)*sp
Mtreated - Mplacebo + c(-1,1)*qt(.95,8)*(1/n+1/n)^(1/2)*sp
Mtreated - Mplacebo + c(-1,1)*qt(.95,16)*(1/n+1/n)^(1/2)*sp
Mtreated - Mplacebo + c(-1,1)*qt(.95,16)*(1/n+1/n)^(1/2)*sp
Mplacebo + c(-1,1)*qt(.95,16)*(1/n+1/n)^(1/2)*sp
sp
Mtreated - Mplacebo + c(-1,1)*qt(.95,16)*sqrt(1/n+1/n)*sp
c(-1,1)*qt(.95,16)*sqrt(1/n+1/n)*sp
Mplacebo - Mtreated + c(-1,1)*qt(.95,16)*sqrt(1/n+1/n)*sp
sp = sqrt(((n-1)*Splacebo^2+(n-1)*Streated^2)/(n + n -2))
sp
n = 9
Splacebo = 1.5
Streated = 1.8
Mplacebo = 1
Mtreated = -3
sp = sqrt(((n-1)*Splacebo^2+(n-1)*Streated^2)/(n + n -2))
Mplacebo - Mtreated + c(-1,1)*qt(.95,16)*sqrt(1/n+1/n)*sp
n = 9
Splacebo = 1.5
Streated = 1.8
Mplacebo = 1
Mtreated = -3
sp = sqrt(((n-1)*Splacebo^2+(n-1)*Streated^2)/(n + n -2))
Mtreated - Mplacebo + c(-1,1)*qt(.95,16)*sqrt(1/n+1/n)*sp
set.seed(2)
newt = rnorm(10,3, sd = sqrt(.6))
oldt = rnorm(10,5, sd = sqrt(.68))
t.test(newt-oldt, var.equal = T, conf.level =.95)
t.test(newt,oldt, var.equal=T, conf.level=.95)
t.test(newt-oldt, var.equal = T, conf.level =.95)
1100 + 30/3 * qt(.975,9-1) + c(-1,1)
1100 + 30/3 * qt(.975,9-1) + c(-1,1)
1100 + 30/sqrt(8) * qt(.975,9-1) + c(-1,1)
1100 + 30 * qt(.975,9-1) + c(-1,1)
1100 + 30/3 * qt(.975,9-1) * c(-1,1)
c(1.5,2.10.2.60,1.5) - 2 * qt(.975,8)
c(1.5,2.10,2.60,1.5) - 2 * qt(.975,8)
c(1.5,2.10,2.60,1.5) - 2 * qt(.975,8)*3
c(1.5,2.10,2.60,1.5) - 2 + qt(.975,8)*3
- 2 + qt(.975,8)*c(1.5,2.10,2.60,1.5)/3
newt = rnorm(100,5,.5)
oldt = rnorm(100,6,2)
t.test(newt,oldt, var.equal = F, conf.level = .95)
t.test(oldt=newt, var.equal = F, conf.level = .95)
t.test(oldt-newt, var.equal = F, conf.level = .95)
n = 9
Splacebo = 1.5
Streated = 1.8
Mplacebo = 1
Mtreated = -3
sp = sqrt(((n-1)*Splacebo^2+(n-1)*Streated^2)/(n + n -2))
Mplacebo - Mtreated + c(-1,1)*qt(.95,16)*sqrt(1/n+1/n)*sp
Mtreated - MPlaceba + c(-1,1)*qt(.95,16)*sqrt(1/n+1/n)*sp
Mtreated - MPlacebo + c(-1,1)*qt(.95,16)*sqrt(1/n+1/n)*sp
Mtreated - Mplacebo + c(-1,1)*qt(.95,16)*sqrt(1/n+1/n)*sp
ggplot(dfm, aes(reorder(EVTYPE,-value), value, fill = variable)) + geom_bar(position = "dodge", stat = "identity") + scale_x_discrete(labels = abbreviate) + ylab("Number of people") + xlab("Diasters") + ggtitle("People affected by diaster")
install.packageS("pdflatex")
install.package("pdflatex")
package.install("pdflatex")
install.packages("pdflatex")
